<?php
  
  namespace ShiftCodesTK\Router\Endpoint;
  
  use ShiftCodesTK\Router\Endpoint,
      ShiftCodesTK\Router\RequestProperties,
      ShiftCodesTK\Validations,
      ShiftCodesTK\Validations\VariableEvaluator;

  /** The *Request Parameters* represent the arguments passed to the Endpoint. */
  trait RequestParameters {
    use EndpointSignature;
  
    /** Add a *Request Parameter* to the *Endpoint Signature*.
     *
     * @param string $parameter_name The *Name* of the Request Parameter.
     * @param VariableEvaluator $evaluator The *`VariableEvaluator` object responsible for validating the *Parameter Value*.
     * @return Endpoint Returns the `Endpoint` object on success.
     * @throws \Error if `$parameter_name` is already part of the Endpoint Signature.
     */
    public function addRequestParameter (string $parameter_name, VariableEvaluator $evaluator): Endpoint {
      return $this->addEndpointSignatureProperty('requestParameters', ...func_get_args());
    }

    /** Get the *Request Parameter Signature* for the Endpoint
     *
     * @return array Returns an `array` representing the *Request Parameter Signature* for the Endpoint.
     */
    public function getRequestParameterSignature (): array {
      return $this->getEndpointPropertySignature('requestParameters');
    }
    /** Get the *Request Parameters* from the Request
     *
     * @param bool $validate_parameters Indicates if the Request Parameters should be *Validated* during retrieval. Defaults to **true**.
     * @param bool $record_invalid_parameters Indicates if *Errors* generated by invalid Request Parameters should be added to the {@see RoutedRequest}.
     * - If this value is set to **true** and the method is called multiple times, errors may be duplicated.
     * @return array Returns an `array` of the *Request Parameters* from the Request.
     * If a parameter was not provided, its value will be set to its *Default Value*.
     */
    public function getRequestParameters (
      bool $validate_parameters = true,
      bool $record_invalid_parameters = false
    ): array {
      $request_parameters = [];
      $parameter_source = (function () {
        $post_methods = [
          RequestProperties::REQUEST_METHOD_POST,
          RequestProperties::REQUEST_METHOD_PUT,
          RequestProperties::REQUEST_METHOD_DELETE,
          RequestProperties::REQUEST_METHOD_PATCH
        ];
        $request_method = $this->requestProperties
          ->getRequestInfo('requestMethod');
        $request_data = $this->requestProperties
          ->getRequestData();
        
        if (in_array($request_method, $post_methods)) {
          return $request_data['POST'];
        }
        else {
          return $request_data['GET'];
        }
      })();
      
      if ($validate_parameters) {
        $group_evaluator = new Validations\GroupEvaluator($this->endpointSignature['requestParameters']);
        
        $group_evaluator->check_variables($parameter_source);

        $request_parameters = $group_evaluator->get_last_result('variables');

        if ($record_invalid_parameters) {
          $errors = $group_evaluator->get_last_result('errors');

          if ($errors) {
            foreach ($errors as $error) {
              $this->routedRequest
                ->addError($error);
            }
          }
        }
      }
      else {
        /**
         * @var VariableEvaluator $parameter_evaluator
         */
        foreach ($this->endpointSignature['requestParameters'] as $parameter_name => $parameter_evaluator) {
          if (array_key_exists($parameter_name, $parameter_source)) {
            $request_parameters[$parameter_name] = $parameter_source[$parameter_name];
          }
          else {
            $request_parameters[$parameter_name] = $parameter_evaluator->default_value;
          }
        }
      }
      
      return $request_parameters;
    }
  }