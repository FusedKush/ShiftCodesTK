/*********************************
  Global Sass Declarations
*********************************/

/*** Variables ***/
// Primary Site Theme
$site-color-main:        #0f1d2c;              // Main Color
$site-color-light:       #152c42;              // Light Accent
$site-color-lighter:     #1d3f60;              // Lighter Accent
$site-color-dark:        #091320;              // Dark Accent
$site-color-darker:      #060c12;              // Darker Accent

// Secondary Site Themes
$theme-main:             #f00;                 // Main Theme Color
$theme-bl1:              #dc143c;              // BL1: GOTY Theme Color
$theme-bl2:              #ff4500;              // Borderlands 2 Theme Color
$theme-tps:              #1e90ff;              // Borderlands: TPS Theme Color

// Misc. Site Properties
$df-color:               #fff;                 // Default Site Color
$df-font:                Arial, sans-serif;    // Default Site Font
$df-line-height:         1.25;                 // Default Line-Height
$trd:                    0.2s ease-out;        // Default Transition Timing & Style
$trds:                   0.4s ease-out;        // Slower Transition Timing & Style
$bbl-light:              #fff;                 // Light Bubble Color
$bbl-dark:               #000;                 // Dark Bubble Color
$badge-new:              #0057ff;              // New! Badge Color
$badge-exp:              #ff8c00;              // Expiring! Badge Color

/*** Functions ***/
// Transparent Black
@function tpb($opacity) {
  @return rgba(0, 0, 0, $opacity);
}
// Transparent White
@function tpw($opacity) {
  @return rgba(255, 255, 255, $opacity);
}
// Default Transition Timing
@function trd($duration) {
  @return ease-out $duration;
}
// Default Box-Shadow / Text-Shadow Properties
@function shadow($color: tpb(0.5), $radius: 1em) {
  @return 0 0 $radius $color;
}
// Default Drop-Shadow Properties
@function dropShadow($color: tpb(0.25)) {
  @return 1px 1px 2px $color;
}

/*** Mixins ***/
// Ready Content
@mixin ready {
  opacity: 1;
  transition: opacity $trd;

  * {
    opacity: 1;
    transition: opacity $trd;
  }
}
// Flex
// Mixin-Dependent Functions
@function getFlexAlignment ($align) {
  @if $align == c       { @return center; }
  @else if $align == s  { @return flex-start; }
  @else if $align == e  { @return flex-end; }
  @else if $align == sa { @return space-around; }
  @else if $align == sb { @return space-between; }
  @else if $align == se { @return space-evenly; }
}
@function getFlexDirection ($direction) {
  @if $direction == c       { @return column; }
  @else if $direction == cr { @return column-reverse; }
  @else if $direction == r  { @return row; }
  @else if $direction == rr { @return row-reverse; }
}
// Mixin
@mixin flex($horizontal: c, $vertical: c, $direction: none, $wrap: false, $type: default) {
  @if $type == default     { display: flex; }
  @else if $type == inline { display: inline-flex; }

  @if $direction == none or $direction == r or $direction == rr {
    @if $vertical != none   { align-items: getFlexAlignment($vertical); }
    @if $horizontal != none { justify-content: getFlexAlignment($horizontal); }
  }
  @else if $direction == c or $direction == cr {
    @if $horizontal != none { align-items: getFlexAlignment($horizontal); }
    @if $vertical != none   { justify-content: getFlexAlignment($vertical); }
  }

  @if $direction != none { flex-direction: getFlexDirection($direction); }
  @if $wrap != false     { flex-wrap: wrap; }
}
// Stretch to fill Parent Container
@mixin fill ($pseudo: false, $background: false, $animated: false) {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;

  @if $pseudo == true      { content: ""; }
  @if $background != false { background-color: $background; }
  @if $animated == true    { transition: opacity $trd; }
}
// Mixin for backwards-compatibility;
@mixin pseudo-fit { @include fill(true); }
// Unstyled Link
@mixin unstyledLink {
  color: inherit;
  text-decoration: none;
}
// Dynamic Theme Colors
@mixin dynamicTheme-color {
  body[data-theme="main"] & { color: $theme-main; }
  body[data-theme="bl1"] &  { color: $theme-bl1; }
  body[data-theme="bl2"] &  { color: $theme-bl2; }
  body[data-theme="tps"] &  { color: $theme-tps; }
}
@mixin dynamicTheme-bgColor {
  body[data-theme="main"] & { background-color: $theme-main; }
  body[data-theme="bl1"] &  { background-color: $theme-bl1; }
  body[data-theme="bl2"] &  { background-color: $theme-bl2; }
  body[data-theme="tps"] &  { background-color: $theme-tps; }
}
@mixin dynamicTheme-borderColor {
  body[data-theme="main"] & { border-color: $theme-main; }
  body[data-theme="bl1"] &  { border-color: $theme-bl1; }
  body[data-theme="bl2"] &  { border-color: $theme-bl2; }
  body[data-theme="tps"] &  { border-color: $theme-tps; }
}
