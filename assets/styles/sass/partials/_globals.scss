/*********************************
  Global Sass Declarations
*********************************/

/*** Variables ***/
// Primary Site Theme
$site-color-main:        #0f1d2c;              // Main Color
$site-color-light:       #152c42;              // Light Accent
$site-color-lighter:     #1d3f60;              // Lighter Accent
$site-color-dark:        #091320;              // Dark Accent
$site-color-darker:      #060c12;              // Darker Accent

// Secondary Site Themes
$theme-main:             #f00;                 // Main Theme Color
$theme-bl1:              #dc143c;              // BL1: GOTY Theme Color
$theme-bl2:              #ff4500;              // Borderlands 2 Theme Color
$theme-tps:              #1e90ff;              // Borderlands: TPS Theme Color
$themeColors: (                                // Theme Color Definition List
                         main: $theme-main,
                         bl1: $theme-bl1,
                         bl2: $theme-bl2,
                         tps: $theme-tps
              );

// Misc. Site Properties
$df-color:               #fff;                 // Default Site Color
$df-font:                Arial, sans-serif;    // Default Site Font
$df-line-height:         1.25;                 // Default Line-Height
$trd:                    0.2s ease-out;        // Default Transition Timing & Style
$trds:                   0.4s ease-out;        // Slower Transition Timing & Style

$bbl-light:              #fff;                 // Light Bubble Color
$bbl-dark:               #000;                 // Dark Bubble Color
$badge-new:              #0057ff;              // New! Badge Color
$badge-exp:              #ff8c00;              // Expiring! Badge Color

/*** Functions ***/
// Default Transition Timing
@function trd($duration) {
  @return ease-out $duration;
}
// Z-Index Stacking Order
@function zOrder($type) {
  $stackingOrder: (
    hidden: -1,
    default: 0,
    higher: 1,
    navbar: 100,
    sidebar: 101,
    popup: 102
    );

  @return map-get($stackingOrder, $type);
}
// Default Border Properties
@function bd($width, $color: none) {
  $val: null;

  @if $color == none { $val: $width solid; }
  @else              { $val: $width solid $color; }

  @return $val;
}
// Transparent Black
@function tpb($opacity) {
  @return rgba(0, 0, 0, $opacity);
}
// Transparent White
@function tpw($opacity) {
  @return rgba(255, 255, 255, $opacity);
}
// Default Box-Shadow / Text-Shadow Properties
@function shadow($color: currentcolor, $radius: 1em) {
  @return 0 0 $radius $color;
}
// Default Drop-Shadow Properties
@function dropShadow($color: tpb(0.25)) {
  @return 1px 1px 2px $color;
}

/*** Mixins ***/
// Content Styles Loaded
@mixin ready {
  &, * { opacity: 1; }
}
// Layout //
// Flexbox
@mixin flexbox($vAlign: c, $hAlign: c, $type: default, $direction: default, $wrap: false) {
  $axisList: (
    v: $vAlign,
    h: $hAlign
    );
  $alignments: (
    c: center,
    s: flex-start,
    e: flex-end,
    sb: space-between,
    sa: space-around,
    se: space-evenly
    );
  $directions: (
    r: row,
    rr: row-reverse,
    c: column,
    cr: column-reverse
    );

  // Type
  @if $type == default { display: flex; }
  @else                { display: inline-flex; }
  // Alignment
  @each $axisN, $axisV in $axisList {
    @if $axisV != none {
      $selector: none;

      @if $direction == default or $direction == r or $direction == rr {
        @if $axisN == v      { $selector: align-items;  }
        @else if $axisN == h { $selector: justify-content; }
      }
      @else if $direction == c or $direction == cr {
        @if $axisN == v      { $selector: justify-content;  }
        @else if $axisN == h { $selector: align-items; }
      }

      #{$selector}: map-get($alignments, $axisV);
    }
  }
  // Direction
  @if $direction != default { flex-direction: map-get($directions, $direction); }
  // Wrap
  @if $wrap == true { flex-wrap: wrap; }
}
// Absolutely Fill Parent Container
@mixin fill($pseudo: false, $background: false, $deprecatedParameterAnimated: false) {
  position: absolute;
  @include pull(all);

  @if $pseudo == true      { content: ""; }
  @if $background != false { background-color: $background; }
}
// Stretch to fill parent container (Warning! May become deprecated in future releases; Use multiProp Sizing instead.)
@mixin stretch($type: both) {
  @if $type == both or $type == h { height: 100%; }
  @if $type == both or $type == w { width: 100%; }
}
// Element Pull
@mixin pull($sides...) {
  $sideNames: (
    t: top,
    l: left,
    b: bottom,
    r: right
    );

  @each $side in $sides {
    $selected: none;

    @if $side == all     { $selected: t, l, b, r; }
    @else if $side == tb { $selected: t, b; }
    @else if $side == lr { $selected: l, r; }
    @else                { $selected: $side; }

    @each $selection in $selected {
      #{map-get($sideNames, $selection)}: 0;
    }
  }
}

// Shorthands //
// Color / Background Color / Border Color Shorthand
@mixin colors($color: none, $bgColor:none, $bcColor: none) {
  $rules: (
    color: $color,
    background-color: $bgColor,
    border-color: $bcColor
    );

  @each $ruleN, $ruleV in $rules {
    @if $ruleV != none { #{$ruleN}: $ruleV; }
  }
}
// Height / Width Shorthand
@mixin sizing($height, $width) {
  height: $height;
  width: $width;
}
// Padding / Margin Shorthand
@mixin spacing($margin, $padding) {
  margin: $margin;
  padding: $padding;
}
// Before / After Pseudo Element Shorthand
@mixin pshared {
  &::before, &::after { @content; }
}
// Shorthand Listed Animation Properties
@mixin animation($duration: unset, $timing: unset, $count: unset, $fill: unset, $delay: unset) {
  $props: (
    duration: $duration,
    timing-function: $timing,
    iteration-count: $count,
    fill-mode: $fill,
    delay: $delay
    );

  @each $propN, $propV in $props {
    @if $propV != unset {
      animation-#{$propN}: $propV;
    }
  }
}
// Multiple Properties with the same value
@mixin multiProp($value, $properties...) {
  @each $property in $properties {
    $shorthandProps: none;

    @if $property == colors  { $shorthandProps: color, background-color; }
    @if $property == sizing  { $shorthandProps: height, width; }
    @if $property == spacing { $shorthandProps: margin, padding; }
    @if $shorthandProps != none {
      @each $sProp in $shorthandProps {
        #{$sProp}: $value;
      }
    }
    @else { #{$property}: $value; }
  }
}

// Element States //
// Hover, Focus, Active States
@mixin mouseState($type) {
  $types: (
    noHover: "&:not(:hover):not(:focus)",
    hover: "&:hover, &:focus",
    click: "&:active"
    );

  #{unquote(map-get($types, $type))} { @content; }
}
// Use "hidden" attribute to determine display type
@mixin hiddenToggle($visibleType) {
  &[hidden]       { display: none; }
  &:not([hidden]) { display: $visibleType; }
}

// Theming //
// Theme Colors
@mixin theme($types...) {
  $typeNames: (
    c: color,
    bg: background-color,
    bc: border-color
    );

  @each $type in $types {
    @each $colorN, $colorV in $themeColors {
      body[data-theme="#{$colorN}"] & { #{map-get($typeNames, $type)}: $colorV; }
    }
  }
}
// Background Image Positioning
@mixin bgImg($imgURL: false) {
  background-position: center;
  background-size: cover;

  @if $imgURL != false { background-image: url(#{$imgURL}); }
}
