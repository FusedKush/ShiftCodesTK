/*********************************
  Global (Shared) Styles
*********************************/

@import "../partials/_globals";
@import "../partials/_spinner";
@import "../partials/profile-card";

/*** Global Declarations ***/
// Default Styles
// CSS Reset
*, ::before, ::after {
  position: relative;
  @include multiProp(0, spacing);
  box-sizing: border-box;
  transition: opacity $trd, transform $trd;
}
// Startup styles
body {
  background-color: $site-color-main;

  &:not(.scroll-disabled) {
    top: 0 !important;
  }
  &.scroll-disabled {
    position: fixed;
    overflow: hidden;
  }
}
main.no-header {
  min-height: 100%;
}
html, body {
  @include multiProp(100%, sizing);
}
body {
  color: $df-color;
  background-color: $site-color-main;
  font-family: $df-font;
  line-height: $df-line-height;
  opacity: 1;
}
a {
  text-decoration: none;

  &.tr-underline {
    @include mouseState(noHover) { text-decoration: none; }
    @include mouseState(hover)   { text-decoration: underline; }
    @include mouseState(click)   { opacity: 0.75; }
  }
  &.tr-appear {
    @include mouseState(noHover) { opacity: 0.75; }
    @include mouseState(hover)   { opacity: 1; }
    @include mouseState(click)   { text-decoration: underline; }
  }
  &:not(.themed) { color: inherit; }
}
p:not(:first-child) { margin-top: $df-elm-spacing; }
button {
  background: transparent;
  border: none;
  @include multiProp(inherit, color, font-family);
}
button.styled, a.button {
  $buttonColors: (
    'info': #6beaff,
    'warning': #ff6c00,
    'danger': #ff0000
  );

  @at-root %noHover {
    &:not(.color-on-hover):not(.color-text) {
      &:not(.color)::before              { opacity: 0.1; }
      &.color {
        &.light::before, &.dark::before  { opacity: 0.4; }
        &:not(.light):not(.dark)::before { opacity: 0.4; }
      }
    }
    &.color-on-hover,
    &.color-text {
      &::before                          { opacity: 0; }
    }           
    &.color-text {
      &.light                            { color: $site-color-lighter; }
      &.dark                             { color: $site-color-darker; }
      &.theme                            { @include theme(c); }
      &.class-theme                      { @include classTheme((c)); }

      @each $name, $color in $buttonColors {
        &.#{$name}                       { color: $color; }
      }
    }

    &::after                             { opacity: 0.5; }
    span                                 { opacity: 0.85; }
  }
  @at-root %hover {
    &:not(.color) {
      &::before                        { opacity: 0.25 }
    }
    &.color {
      &.light::before, &.dark::before  { opacity: 1; }
      &:not(.light):not(.dark)::before { opacity: 0.75; }

      @each $name, $color in $buttonColors {
        &.#{$name}::before             { opacity: 0.75; }
      }
    }

    &::after                           { opacity: 0.75; }
    span                               { opacity: 1; }
  }

  @include flexbox;
  text-align: center;
  text-shadow: dropShadow(tpb(0.5));
  padding: 12px;
  border-radius: 4px;
  font-size: 1em;
  line-height: 1;
  transition: color $trd;
  
  @include pshared {
    @include fill(true);
  }
  
  &::after {
    border: bd(1.5px, #fff);
    border-radius: inherit;
  }
  &:not(:first-child) {
    margin-left: 8px;
  }

  &:not(.color) {
    &::before {
      background-color: #fff;
    }
  }
  &.color {
    &.light::before       { background-color: $site-color-lighter; }
    &.dark::before        { background-color: $site-color-darker; }
    &.theme::before       { @include theme(bg); }
    &.class-theme         { @include classTheme((bg), before); }

    @each $name, $color in $buttonColors {
      &.#{$name}::before  { background-color: $color; }
    }
  }
  &:not([aria-pressed="true"]) {
    &:not([disabled]) {
      @include mouseState(noHover) {
        @extend %noHover;
      }
      @include mouseState(hover) {
        @extend %hover;
      }
      @include mouseState(click) {
        &:not(.color) {
          &::before                        { opacity: 0.15 }
        }
        &.color {
          &.light::before, &.dark::before  { opacity: 0.75; }
          &:not(.light):not(.dark)::before { opacity: 0.5; }
        }
      }
    }
    &[disabled] {
      @extend %noHover;
    }
  }
  &[aria-pressed="true"] {
    &:not([disabled]) {
      @include mouseState(noHover) {
        @extend %hover;
      }
      @include mouseState(hover) {
        &:not(.color) {
          &::before                        { opacity: 0.1 }
        }
        &.color {
          &.light::before, &.dark::before  { opacity: 0.85; }
          &:not(.light):not(.dark)::before { opacity: 0.6; }
        }
    
        // &::after                           { opacity: 0.75; }
        // span                               { opacity: 1; }
      }
      @include mouseState(click) {
        &:not(.color) {
          &::before                        { opacity: 0.15 }
        }
        &.color {
          &.light::before, &.dark::before  { opacity: 0.65; }
          &:not(.light):not(.dark)::before { opacity: 0.4; }
        }
      }
    }
    &[disabled] {
      @extend %hover;
    }
  }

  span {
    white-space: nowrap;
  }
}
button, a {
  &:hover:not([disabled]) {
    cursor: pointer;
  }
}
button, a, input, select, textarea {
  &[disabled], &[readonly] {
    &:not(.checkbox):not(.radio) {
      opacity: 0.5 !important;
    }
    
    cursor: not-allowed !important;
  }
}
ul.styled { list-style: disc inside; }
ol.styled { list-style: decimal inside; }
ul, ol {
  $margins: $df-elm-spacing;

  &.styled {
    &:not(:first-child) { margin-top: $margins; }
    &:not(:last-child)  { margin-bottom: $margins; }

    li { padding: 2px 0; }
    ul { list-style: disc inside; }
    ol { list-style: decimal inside; }
    ul, ol {
      margin-top: 2px;
    }
    &, ul, ol {
      margin-left: $margins;
    }
  }
  &:not(.styled) { list-style: none; }
}
code {
  padding: 2px 6px;
  line-height: 1.5;
  white-space: nowrap;
}
pre {
  @include spacing($df-elm-spacing 0, 8px);

  code {
    background-color: transparent;
    padding: 0;
  }
}
pre, code {
  font-family: inherit;
  border-radius: 4px;
  background-color: tpw(0.1);
  border: bd(1.5px, tpw(0.5));
  overflow: auto;
  text-shadow: dropShadow(tpb(0.5));
}
img {
  max-width: 100%;
}
template, .webp-support { display: none; }
.xe-notice {
  // text-shadow: dropShadow(tpb(0.5));

  th, td {
    padding: 6px;
    color: black;
    // text-shadow: dropShadow(tpb(0.25));
  }
}

// Reusable Classes
// ------------------------
// Header
@media screen and (max-width: 474px) {
  header.main .intro   { height: calc(30vh + 32px); }
  main:not(.no-header) { min-height: calc(70vh - 32px); }
}
@media screen and (min-width: 475px) {
  header.main .intro   { height: calc(30vh + 64px); }
  main:not(.no-header) { min-height: calc(70vh- 64px); }
}
header.main {
  @include ready;

  width: 100%;
  overflow: hidden;

  .intro {
    border-bottom: 4px solid;
    // height: calc(100% - 37px - 1rem);
    @include theme(bc);
    @include bgImg;
    overflow: hidden;
    z-index: zOrder(higher);

    &::after {
      position: absolute;
      @include pull(b, l);
      width: 100%;
      box-shadow: 0 0 1em 0.5em tpb(0.75);
      content: "";
    }

    .content-container {
      @include multiProp(100%, sizing);
      padding-top: 64px;
      background-color: tpb(0.6);
    }
    .content-wrapper {
      @include flexbox(e, s);
      @include multiProp(100%, sizing);
      padding: 32px 16px;
      text-align: start;
    }
    .content {
      @media screen and (max-width: 474px) {
        font-size: 1em;
      }
      @media screen and (min-width: 475px) and (max-width: 699px) {
        font-size: 1.25em;
      }
      @media screen and (min-width: 700px) {
        font-size: 1.5em;
      }

      text-shadow: 1px 1px 4px tpb(0.8);
      max-width: 85%;
    }
    .title {
      font-size: 2em;
      line-height: 1.1;
    }
    .description {
      font-size: 1.1em;
      opacity: 0.75;
      padding-top: 4px;
    }
  }
  .breadcrumbs {
    @keyframes breadcrumbFadeIn {
      from {
        opacity: 0;
      }
      to {
        opacity: 1;
      }
    }

    display: flex;
    @include theme(bg);
    border-bottom: bd(2px, tpw(0.5));
    animation: breadcrumbFadeIn 0.2s ease-out;

    &::before {
      @include fill(true, tpb(0.5));
    }
    &:not(.ready) {
      display: none
    }

    .content-wrapper {
      @include flexbox($hAlign: s, $wrap: true);
      width: 100%;
      padding: 8px 12px;
      transition: transform 0.8s;
    }
    .separator { opacity: 0.5; }
    .separator, b.crumb { cursor: default; }
    .separator, .crumb {
      @include spacing(4px, 4px 8px);
      line-height: 1;
      background-color: tpw(0.25);
      border: bd(1.5px, tpw(0.5));
      border-radius: 4px;
    }
  }
}
main {
  opacity: 1;

  &.content-wrapper { padding: 32px 16px; }
  &.no-header {
    min-height: 100%;
    padding-top: 80px;
  }
}
.content-wrapper {
  max-width: 1200px;
  margin: 0 auto;
}
div, span, a, button, strong, b, em, i {
  &.box-icon        { @include boxIcon(false); }
  &.inline-box-icon { @include boxIcon(true); }
}
.highlight {
  width: 100%;
  @include spacing(0, 12px);
  @include colors(tpw(0.75), tpw(0.1));
  box-shadow: inset shadow(tpb(0.25), 10px);
  border: bd(1.5px);
  border-color: inherit;
  border-radius: 4px;

  &::before {
    @include fill(true, tpb(0.3));
  }

  pre {
    @include multiProp(0, spacing);
    background-color: transparent;
    white-space: normal;
    overflow: hidden;
    word-wrap: break-word;
  }
  mark, code {
    color: inherit;
    background-color: transparent;

    &.statement { color: #f0f; }
    &.state     { color: #ff8c00; }
    &.key       { color: #ffcd00; }
    &.value     { color: #7cfc00; }
    &.statement, &.state {
      text-shadow: 0 0 tpw(0.5);
    }
  }
}

/*** Custom Elements ***/
// Bubbles
.spacer { padding: 6px 0; }
@mixin bubbleStates ($opacity, $scale) {
  opacity: $opacity;
  transform: scale($scale);
}

.bubble-parent {
  @include flexbox;

  &:not(:hover):not(:focus):not([aria-pressed="true"]) .bubble { 
    @include bubbleStates(0, 0); 
  }
  &:hover, &:focus, &[aria-pressed="true"] {
    .bubble {
      @include bubbleStates(0.3, 1); 
    }
  }
  &:active .bubble {
    @include bubbleStates(0.5, 1);
  }

  .bubble {
    position: absolute;
    border-radius: 50%;
    @include multiProp(80%, sizing);

    &-light { background-color: $bbl-light; }
    &-dark  { background-color: $bbl-dark; }
  }
}
// External Link Icons
.external-link-icon {
  @keyframes externalLinkIconEnter {
    0%, 50%, 100% { transform: scale(1); }
    25%           { transform: scale(0.8); }
    75%           { transform: scale(1.2); }
  }
  @keyframes externalLinkIconLeave {
    0%, 100% { transform: scale(1); }
    50%      { transform: scale(1.2); }
  }
  @keyframes externalLinkIconClick {
    0%   { opacity: 1; }
    100% { opacity: 0.75; }
  }

  @include flexbox($type: inline);

  &:not(:hover):not(:focus) {
    .external {
      opacity: 0;
    }
    .icon {
      opacity: 1;
      animation-name: externalLinkIconLeave;
    }
  }
  &:hover, &:focus {
    .external {
      opacity: 1;
      animation-name: externalLinkIconEnter;
    }
    .icon {
      opacity: 0;
    }
  }
  &:active {
    .external {
      animation-name: externalLinkIconClick;
    }
  }
  .external, .icon {
    position: absolute;
     animation: 0.25s linear forwards;
  }
}
// Copy to Clipboard Button
button.copy {
  @keyframes copiedToClipboard {
    0%, 50%, 100% { transform: scale(1); }
    25%           { transform: scale(0.9); }
    75%           { transform: scale(1.1); }
  }

  &.animated {
    span, div {
      animation: copiedToClipboard 0.5s linear;
    }
  }
}
// Progress Bar
.progress-bar {
  @include sizing(6px, 100%);
  background-color: tpb(0.5);
  border-radius: 8px;

  .progress {
    @include multiProp(100%, sizing);
    background-color: tpw(0.5);
    border-radius: 8px;

    // Pull bar to 0%
    position: absolute;
    // left: -100%;
    // transform: translateX(0);
    width: 0%;
    transition: width 0.4s ease;

    &.no-animation {
      transition: none;
    }
  }
}
// Horizontal Menus
.h-menu {
  @include flexbox(e);
  padding: 8px;
  font-size: 1.15em;
  
  a, button {
    @include multiProp(8px, spacing);
    font-size: 1em;

    @include pshared {
      @include fill(true);
      border-bottom: 2px solid;
      opacity: 0;
    }
    &::before {
      border-color: #fff;
    }
    &::after {
      @include theme(bc);
    }
    @include mouseState(noHover) {
      &:not([aria-selected="true"]):not([aria-pressed="true"]) {
        opacity: 0.75;
      }
    }
    @include mouseState(hover) {
      &::before {
        opacity: 1;
      }
    }
    @include mouseState(click) {
      opacity: 0.75;
    }
    &[aria-selected="true"], &[aria-pressed="true"] {
      &::after {
        opacity: 1;
      }
    }
  }
}
#containers {
  @include fill;
  pointer-events: none;

  #templates {
    display: none;
  }
  #modals .modal {
    pointer-events: all;
  }
}