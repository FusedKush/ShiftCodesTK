@import "../partials/_globals";

// The layer container
#layers {
  @include multiProp(100%, sizing);

  > .layer {
    @include flexbox();

    // &[hidden] {
    //   form {
    //     animation-duration: 0 !important;
    //   }
    // }
  }
}
.layer {
  @mixin layerRoot {
    @at-root #layers .layer {
      @content;
    }
  }

  $layerBorders: (
    dropdown: 1.5px,
    tooltip: 1px
  );
  $contentSpacing: 12px;
  $layerShadow: tpb(0.75);

  display: none; // Hide inactive Layers

  position: absolute;
  transition-duration: 0.1s;
  transition-timing-function: ease;
  z-index: zOrder(layer);

  &.sticky {
    position: fixed;
  }
  &.small-target {
    margin: 0 -8px;
  }

  &[hidden] {
    opacity: 0;

    &.tooltip {
      transform: scale(0.95);
    }
  }
  
  // Positioning
  & {
    $posList: (
      top: (
        direction: bottom,
        alignments: (left, right),
        pointer-transform: translateY(0.125em),
        pointer-rotation: 180,
        pointer-pull: 0,
        dropdownTransition: translateY(25%),
        panelAnimation: (
          translateY(25%),
          translateY(-10%),
          translateY(0)
        )
      ),
      right: (
        direction: left,
        alignments: (top, bottom),
        pointer-transform: translateX(-0.125em),
        pointer-rotation: 270,
        pointer-pull: 16,
        dropdownTransition: translateX(-25%),
        panelAnimation: (
          translateX(-25%),
          translateX(10%),
          translateX(0)
        )
      ),
      bottom: (
        direction: top,
        alignments: (left, right),
        pointer-transform: translateY(-0.125em),
        pointer-rotation: 0,
        pointer-pull: 0,
        dropdownTransition: translateY(-25%),
        panelAnimation: (
          translateY(-25%),
          translateY(10%),
          translateY(0)
        )
      ),
      left: (
        direction: right,
        alignments: (top, bottom),
        pointer-transform: translateX(0.125em),
        pointer-rotation: 90,
        pointer-pull: 16,
        dropdownTransition: translateX(25%),
        panelAnimation: (
          translateX(25%),
          translateX(-10%),
          translateX(0)
        )
      )
    );

    @each $pos, $posProps in $posList {
      @keyframes panel#{$pos}Transition {
        0% { transform: nth(map-get($posProps, 'panePlAnimation'), 1); }
        50% { transform: nth(map-get($posProps, 'panelAnimation'), 2); }
        100% { transform: nth(map-get($posProps, 'panelAnimation'), 3); }
      }

      &[data-layer-pos="#{$pos}"] {
        $layerSpacing: 16px;
        $cursorOffset: 6px;

        &[hidden].dropdown {
          transform: map-get($posProps, 'dropdownTransition');
        }
        &.panel {
          animation: panel#{$pos}Transition 0.3s ease-out;
        }

        @each $alignment in map-get($posProps, "alignments") {
          
          &[data-layer-align="#{$alignment}"] {
            &.dropdown.use-cursor .layer-content {
              #{$alignment}: calc(100% - #{$cursorOffset});
              // #{$alignment}: -4px;
            }
            &:not(.use-cursor), &:not(.dropdown) {
              .layer-content {
                // #{$alignment}: calc(100% - #{$layerSpacing});
                #{$alignment}: -#{$layerSpacing};
              }
            }

            &.pull-pointer .pointer {
              #{$alignment}: #{map-get(map-get($posList, $alignment), 'pointer-pull')}px;
            }
          }

          .wrapped .layer-content {
            @if $alignment == left {
              justify-content: start;
            }
            @else if $alignment == right {
              justify-content: end;
            }
          }
        }

        &.dropdown.use-cursor {
          .layer-content, .pointer {
            #{map-get($posProps, "direction")}: calc(100% - #{$cursorOffset});
          }
        }
        &:not(.use-cursor), &:not(.dropdown) {
          .layer-content, .pointer {
            #{map-get($posProps, "direction")}: 100%;
          }
        }
        .pointer {
          transform: #{map-get($posProps, 'pointer-transform')} rotate(#{map-get($posProps, "pointer-rotation")}deg);
        }
      }
    }
  }

  .layer-content {
    @include flexbox($hAlign: s);
    box-shadow: shadow($layerShadow, 1em);
    pointer-events: all;
    overflow: hidden;

    @include layerRoot {
      &.tooltip {
        $tooltipBackground: adjust-color($site-color-light, $lightness: 50%);
        $maxTooltipWidth: 220px;

        &.wrapped .layer-content {
          white-space: normal;
          min-width: $maxTooltipWidth;
        }

        .layer-content {
          background-color: $tooltipBackground;
          // border: bd(1.5px, $tooltipBackground);
          border-radius: 8px;
          min-height: 2.25em;
          min-width: 5em;
          max-width: $maxTooltipWidth;
          font-size: 0.85em;
          white-space: nowrap;
          margin: 12px;
          color: $site-color-darker;
          // text-align: center;

          > .content-container {
            // @include flexbox(none, none, $direction: c, $wrap: true);
            padding: 8px 12px;
            width: 100%;
          }
          ul {
            margin-left: 0;
          }
          .pull-right {
            margin-left: auto;
            align-self: end;
            // justify-self: end;
            // right: 0;
            // text-align: right;
          }
        }
        .pointer {
          color: $tooltipBackground;
        }
      }
      &.dropdown {
        $dropdownBorder: tpw(0.75);
        $dropdownRadius: 8px;

        // &.use-cursor .layer-content       { margin: 4px; }
        &:not(.use-cursor) .layer-content { margin: 16px; }

        .layer-content {
          // pointer-events: all;
          @include colors(#fff, $site-color-darker);
          border: bd(1.5px, #fff);
          border-radius: $dropdownRadius;

          .title {
            opacity: 0.5;
            font-size: 1.15em;
            width: 100%;
            border-radius: $dropdownRadius $dropdownRadius 0 0;
            cursor: default;
          }
          .choice-list {
            padding: 4px;
            
            &.scrollable {
              max-height: 12.5em;
              overflow-x: hidden;
              overflow-y: scroll;
            }
      
            li {
              @include flexbox();
              width: 100%;
            }
            .separator {
              border-bottom: bd(tpw(0.25));
              margin: 12px 16px;
              border-radius: 4px;
            }
          }
          .choice {
            @include flexbox(c, s);
            font-size: 1rem;
            cursor: pointer;
            border-radius: 4px;
            margin: 4px;
            width: calc(100% - 8px);
      
            &.styled, &.button {
              &::after {
                border: none;
              }
            }
      
            &[hidden] {
              display: none;
            }
      
            &:not(.styled):not(.button) {
              &::before {
                @include fill(true);
              }
        
              &[aria-pressed="false"], &:not([aria-pressed]) {
                color: inherit;
        
                &::before { 
                  background-color: tpw(0.75); 
                }
      
                @include mouseState(noHover) {
                  &::before                          { opacity: 0; }
                  &::after                           { opacity: 0.5; }
      
                  > span                             { opacity: 0.75; }
                }
                @include mouseState(hover) {
                  &::before                          { opacity: 0.35 }
                  &::after                           { opacity: 0.75; }
                  
                  > span                             { opacity: 1; }
                }
                @include mouseState(click) {
                  &::before                          { opacity: 0.15 }
                }
              }
              &[aria-pressed="true"] {
                color: #fff;
                @include theme(bg);
        
                &::before {
                  background-color: #fff;
                }
        
                @include mouseState(noHover) {
                  &::before { opacity: 0; }
                }
                @include mouseState(hover) {
                  &::before { opacity: 0.25; }
                }
                @include mouseState(click) {
                  opacity: 0.75;
                }
              }
            }
      
            &::after {
              @include fill(true);
            }
            > span > .inline-box-icon {
              margin-right: 1em;
            }
          }
          .title, .choice {
            $basePadding: 8px;
      
            text-align: left;
            white-space: nowrap;
            padding: #{$basePadding * 1.75} #{$basePadding * 4} #{$basePadding * 1.75} #{$basePadding * 2};
            min-width: 7.5em;
      
            &.title {
              padding-bottom: 0;
            }
          }
        }
        .pointer {
          display: none;
          border-bottom-color: $dropdownBorder;
        }
      }
      &.panel, &.popup {
        $panelBackground: adjust-color($site-color-darker, $lightness: 0%);
        $maxPanelWidth: 480px;

        // &.wrapped .layer-content {
        //   white-space: normal;
        //   min-width: $maxPanelWidth;
        // }

        .layer-content {
          @media screen and (min-width: 420px) {
            min-width: 340px;
            max-width: $maxPanelWidth;
          }
          @media screen and (max-width: 419px) {
            min-width: calc(100vw - 64px);
            max-width: calc(100vw - 64px);
          }
          
          background-color: $panelBackground;
          border: bd(1.5px, tpw(0.5));
          border-radius: 8px;
          min-height: 4em;
          
          font-size: 0.85em;
          // white-space: nowrap;
          margin: 12px;
          color: #fff;
          // text-align: center;

          .title {
            width: 100%;
            margin-bottom: 16px;

            .primary {
              font-size: 1.15em;
            }
            .secondary {
              font-size: 0.85em;
              opacity: 0.75;
            }
          }
          > .content-container {
            @include flexbox(none, none, $wrap: true);
            padding: 16px;
            width: 100%;
          }
          ul {
            margin-left: 0;
          }
          .pull-right {
            margin-left: auto;
            align-self: end;
            // justify-self: end;
            // right: 0;
            // text-align: right;
          }
        }
        .pointer {
          display: none;
        }
      }
    }

    // .content-container {
    //   @include flexbox($hAlign: s);
    // }
  }
  .pointer {
    font-size: 1.5em;
    text-shadow: 0 -2px 2em $layerShadow;
  }
  .layer-content, .pointer {
    position: absolute;
    transition: none;
    pointer-events: auto;
  }
}
.layer-target {
  &.layer-indicator, &.layer-hover-indicator:hover:not(:focus) {
    cursor: help;
    text-decoration: underline dotted;
  }

  .touch-event {
    -webkit-user-select: none;
    -webkit-touch-callout: none; 
  }
}